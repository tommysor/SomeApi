name: Deploy

# env:
#   GITHUB_REPOSITORY_LOWERCASE: 'placeholder_GITHUB_REPOSITORY_LOWERCASE'
#   deployment_name: 'placeholder_deployment_name'
#   image_tag_server1: 'placeholder_image_tag_server1'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  setenv:
    runs-on: ubuntu-22.04

    steps:
    - name: Repo to lowercase
      run: echo "GITHUB_REPOSITORY_LOWERCASE=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

    - name: Deployment name
      run: echo "deployment_name=${{ github.sha }}" >>${GITHUB_ENV}
    
    - name: Image tag name
      run: echo "image_tag_server1=ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/server1:${{ github.sha }}" >>${GITHUB_ENV}

  build:
    runs-on: ubuntu-22.04
    needs: setenv

    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      
      - name: Docker build and push
        run: |
          echo image_tag: ${{ env.image_tag_server1 }}
          docker build --tag ${{ env.image_tag_server1 }} ./src/Server1
          docker push ${{ env.image_tag_server1 }}

  deploy:
    # permissions:
    #   contents: none
    runs-on: ubuntu-22.04
    needs: build
    environment: Production
      # name: 'Production'
      # url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SOMEAPI_DEPLOYER_CREDENTIALS }}

    - name: TEST
      run: |
        echo server1ContainerImage
        echo 'server1ContainerImage=${{ env.image_tag_server1 }}'
        echo ${{ env.image_tag_server1 }}

    - name: deploy
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        # subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./build/main.bicep
        # parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        parameters: 'server1ContainerImage=${{ env.image_tag_server1 }}'
        # failOnStdErr: false
        deploymentMode: Complete
        deploymentName: ${{ env.deployment_name }}
